name: Deploy to Production Server

on:
  workflow_dispatch:
    inputs:
      reason:
        description: "Reason for deployment"
        required: false
        default: "Manual deployment"

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}

      - name: Create target directory on Production Server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST_PRODUCTION }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER_PRODUCTION }}
          APP_PATH: ${{ secrets.APP_PATH_PRODUCTION }}
        run: |
          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "mkdir -p $APP_PATH"

      - name: Copy deployment files to Production Server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST_PRODUCTION }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER_PRODUCTION }}
          APP_PATH: ${{ secrets.APP_PATH_PRODUCTION }}
        run: |
          scp -o StrictHostKeyChecking=no -r \
            ci-build-and-push.sh \
            ci-build-locally.sh \
            ci-logs.sh \
            ci-pull.sh \
            ci-start.sh \
            ci-stop.sh \
            Dockerfile \
            docker-compose.yml \
            docker-compose.staging.yml \
            docker-compose.production.yml \
            $DEPLOY_USER@$DEPLOY_HOST:$APP_PATH/

      - name: Deploy to Production Server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST_PRODUCTION }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER_PRODUCTION }}
          APP_PATH: ${{ secrets.APP_PATH_PRODUCTION }}
        run: |
          echo "Deploying to Production Server at $APP_PATH.."
          echo "Reason for deployment: ${{ github.event.inputs.reason }}"
          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
            set -e # Exit immediately if a command exits with a non-zero status.
            echo "Target APP_PATH: $APP_PATH" # Debugging: print APP_PATH
            mkdir -p $APP_PATH # Create target directory if it doesn't exist (redundant with previous step, but safe)
            ls -ld $APP_PATH # Debugging: check permissions of APP_PATH
            cd $APP_PATH || { echo "Failed to change directory to $APP_PATH"; exit 1; } # Change directory and exit if failed
            echo "Current directory after cd: $(pwd)" # Debugging
            ls -l # Verify files are present and have permissions
            ./ci-pull.sh
            ./ci-start.sh production swarm
          EOF
