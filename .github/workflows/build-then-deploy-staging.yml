name: Build then Deploy to Staging Server

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Added for pushing to GitHub Packages
      actions: write # Correct permission to allow triggering other workflows

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/indoomni/halo-damasta-next:latest
          cache-from: type=registry,ref=ghcr.io/indoomni/halo-damasta-next:buildcache
          cache-to: type=registry,ref=ghcr.io/indoomni/halo-damasta-next:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: staging # Use the 'staging' environment
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create target directory on Staging Server
        env:
          DEPLOY_HOST: ${{ vars.DEPLOY_HOST }}
          DEPLOY_USER: ${{ vars.DEPLOY_USER }}
          APP_PATH: ${{ vars.DEPLOY_PATH }}
        run: |
          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "mkdir -p $APP_PATH"

      - name: Copy deployment files to Staging Server
        env:
          DEPLOY_HOST: ${{ vars.DEPLOY_HOST }}
          DEPLOY_USER: ${{ vars.DEPLOY_USER }}
          APP_PATH: ${{ vars.DEPLOY_PATH }}
        run: |
          scp -o StrictHostKeyChecking=no -r \
            ci-logs.sh \
            ci-pull.sh \
            ci-start.sh \
            ci-stop.sh \
            Dockerfile \
            docker-compose.yml \
            docker-compose.staging.yml \
            docker-compose.production.yml \
            $DEPLOY_USER@$DEPLOY_HOST:$APP_PATH/

      - name: Deploy to Staging Server
        env:
          DEPLOY_HOST: ${{ vars.DEPLOY_HOST }}
          DEPLOY_USER: ${{ vars.DEPLOY_USER }}
          APP_PATH: ${{ vars.DEPLOY_PATH }}
        run: |
          echo "Deploying to Staging Server at $APP_PATH.."
          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << EOF
            cd $APP_PATH
            ./ci-pull.sh
            ./ci-stop.sh staging
            ./ci-start.sh staging standalone
          EOF
